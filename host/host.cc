// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

#include <openenclave/host.h>
#include <stdio.h>
#include <string>
#include <iostream>
#include <zmq.hpp>
#include <thread>
#include <vector>

#include "comm.hpp"
#include "logging.hpp"
#include "config.h"

// Include the untrusted dcr_proxy header that is generated
// during the build. This file is generated by calling the
// sdk tool oeedger8r against the dcr_proxy.edl file.
#include "dcr_proxy_u.h"

bool check_simulate_opt(int* argc, const char* argv[])
{
    for (int i = 0; i < *argc; i++)
    {
        if (strcmp(argv[i], "--simulate") == 0)
        {
            fprintf(stdout, "Running in simulation mode\n");
            memmove(&argv[i], &argv[i + 1], (*argc - i) * sizeof(char*));
            (*argc)--;
            return true;
        }
    }
    return false;
}

// This is the function that the enclave will call back into to
// print a message.
void host_dcr_proxy()
{
    fprintf(stdout, "Enclave called into host to print: Running host code!\n");
}

int main(int argc, const char* argv[])
{
    oe_result_t result;
    int ret = 1;
    oe_enclave_t* enclave = NULL;
    Comm *comm = NULL;
    std::vector<std::thread> task_threads;

    uint32_t flags = OE_ENCLAVE_FLAG_DEBUG;
    if (check_simulate_opt(&argc, argv))
    {
        flags |= OE_ENCLAVE_FLAG_SIMULATE;
        fprintf(stdout, "Running in SIMULATE MODE\n");
    }

    if (argc != 2)
    {
        fprintf(
            stderr, "Usage: %s enclave_image_path [ --simulate  ]\n", argv[0]);
        return -1;
    }

    // Create the enclave
    fprintf(stdout, "Host creating enclave\n");
    result = oe_create_dcr_proxy_enclave(
        argv[1], OE_ENCLAVE_TYPE_AUTO, flags, NULL, 0, &enclave);
    if (result != OE_OK)
    {
        fprintf(
            stderr,
            "oe_create_dcr_proxy_enclave(): result=%u (%s)\n",
            result,
            oe_result_str(result));
        return -1;
    }

    // Call into the enclave
    fprintf(stdout, "Host going to call into enclave_dcr_proxy\n");
    result = enclave_dcr_proxy(enclave);
    if (result != OE_OK)
    {
        fprintf(
            stderr,
            "calling into enclave_dcr_proxy failed: result=%u (%s)\n",
            result,
            oe_result_str(result));
        return -1;
    }

    /******************* TEST *******************/
    comm = new Comm(enclave);
    task_threads.push_back(std::thread(&Comm::run_dc_proxy_listen_write_req_and_join_mcast, comm));
    
    zmq::context_t ctx(1);
    zmq::socket_t *socket_send_write = new zmq::socket_t(ctx, ZMQ_PUSH);
    Logger::log(LogLevel::DEBUG, "[TEST] connecting: tcp://localhost:" + std::to_string(NET_PROXY_RECV_WRITE_REQ_PORT));
    socket_send_write->connect("tcp://localhost:" + std::to_string(NET_PROXY_RECV_WRITE_REQ_PORT));

    std::string s = "test_string";
    zmq::message_t msg(s.size());
    memcpy(msg.data(), s.c_str(), s.size());
    Logger::log(LogLevel::DEBUG, "[TEST] sending: " + s);
    socket_send_write->send(msg);
    
    // Wait for all tasks to finish
    for (auto &t : task_threads)
    {
        t.join();
    }
    /******************* TEST END *******************/

    ret = 0;

exit:
    // Clean up the enclave if we created one
    if (enclave)
        oe_terminate_enclave(enclave);

    return ret;
}
