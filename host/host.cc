// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

#include <openenclave/host.h>
#include <stdio.h>
#include <string>
#include <iostream>
#include <zmq.hpp>
#include <thread>
#include <vector>

#include "capsule.pb.h"
#include "comm.hpp"
#include "logging.hpp"
#include "config.h"

// Include the untrusted dcr_proxy header that is generated
// during the build. This file is generated by calling the
// sdk tool oeedger8r against the dcr_proxy.edl file.
#include "dcr_proxy_u.h"

bool check_simulate_opt(int *argc, const char *argv[])
{
    for (int i = 0; i < *argc; i++)
    {
        if (strcmp(argv[i], "--simulate") == 0)
        {
            fprintf(stdout, "Running in simulation mode\n");
            memmove(&argv[i], &argv[i + 1], (*argc - i) * sizeof(char *));
            (*argc)--;
            return true;
        }
    }
    return false;
}

// Test code snippet used for debugging
void test_code()
{
    zmq::context_t ctx(1);
    // socket send write
    zmq::socket_t *socket_send_write = new zmq::socket_t(ctx, ZMQ_PUSH);
    Logger::log(LogLevel::DEBUG, "[TEST] connecting write socket: tcp://localhost:" + std::to_string(NET_PROXY_RECV_WRITE_REQ_PORT));
    socket_send_write->connect("tcp://localhost:" + std::to_string(NET_PROXY_RECV_WRITE_REQ_PORT));

    // socket send ack
    zmq::socket_t *socket_send_ack = new zmq::socket_t(ctx, ZMQ_PUSH);
    Logger::log(LogLevel::DEBUG, "[TEST] connecting ack socket: tcp://localhost:" + std::to_string(NET_PROXY_RECV_ACK_PORT));
    socket_send_ack->connect("tcp://localhost:" + std::to_string(NET_PROXY_RECV_ACK_PORT));

    // test send write
    capsule::CapsulePDU dc;
    dc.set_payload_in_transit("test_payload_in_transit");
    dc.set_payload_hmac("4765fbc9945aaef7d2b3f28b62adfb4c7396b71b54d2a1853e1be5253d2819f4");
    std::string out_msg;
    dc.SerializeToString(&out_msg);
    zmq::message_t msg(out_msg.size());
    memcpy(msg.data(), out_msg.c_str(), out_msg.size());
    Logger::log(LogLevel::DEBUG, "[TEST] sending write: " + out_msg);
    socket_send_write->send(msg);

    // test send ack (3 times)
    std::this_thread::sleep_for(std::chrono::seconds(1)); // wait for put to finish
    fprintf(stdout, "\n");
    capsule::CapsulePDU ack_dc;
    ack_dc.set_hash("test_hash");
    ack_dc.set_payload_hmac("97b51702f6876c65d5858d10d0a1deeced5d92169ceff42eecc3a607223c5ac9");
    ack_dc.set_replyaddr("localhost:3004");
    std::string out_ack_msg;
    ack_dc.SerializeToString(&out_ack_msg);
    zmq::message_t ack_msg(out_ack_msg.size());
    memcpy(ack_msg.data(), out_ack_msg.c_str(), out_ack_msg.size());
    Logger::log(LogLevel::DEBUG, "[TEST] sending ack: " + out_ack_msg);
    socket_send_ack->send(ack_msg);

    std::this_thread::sleep_for(std::chrono::seconds(1));
    fprintf(stdout, "\n");
    zmq::message_t ack_msg_2(out_ack_msg.size());
    memcpy(ack_msg_2.data(), out_ack_msg.c_str(), out_ack_msg.size());
    Logger::log(LogLevel::DEBUG, "[TEST] sending ack second time: " + out_ack_msg);
    socket_send_ack->send(ack_msg_2);

    std::this_thread::sleep_for(std::chrono::seconds(1));
    fprintf(stdout, "\n");
    zmq::message_t ack_msg_3(out_ack_msg.size());
    memcpy(ack_msg_3.data(), out_ack_msg.c_str(), out_ack_msg.size());
    Logger::log(LogLevel::DEBUG, "[TEST] sending ack third time: " + out_ack_msg);
    socket_send_ack->send(ack_msg_3);

    // test recv ack
    std::string test_recv_ack_addr = "localhost:3004";
    zmq::socket_t socket_recv_ack(ctx, ZMQ_PULL);
    socket_recv_ack.bind("tcp://*:3004");

    std::vector<zmq::pollitem_t> pollitems = {
        {static_cast<void *>(socket_recv_ack), 0, ZMQ_POLLIN, 0},
    };
    while (true)
    {
        zmq::poll(pollitems.data(), pollitems.size(), 0);
        if (pollitems[0].revents & ZMQ_POLLIN)
        {
            // Received an ack msg from proxy
            zmq::message_t message;
            socket_recv_ack.recv(&message);
            std::string ack_msg = std::string(static_cast<const char *>(message.data()), message.size());
            Logger::log(LogLevel::DEBUG, "[TEST CLIENT] Received an ack message: " + ack_msg);
        }
    }
}

int main(int argc, const char *argv[])
{
    oe_result_t result;
    int ret = 1;
    oe_enclave_t *enclave = NULL;

    uint32_t flags = OE_ENCLAVE_FLAG_DEBUG;
    if (check_simulate_opt(&argc, argv))
    {
        flags |= OE_ENCLAVE_FLAG_SIMULATE;
    }

    if (argc != 2)
    {
        fprintf(
            stderr, "Usage: %s enclave_image_path [ --simulate  ]\n", argv[0]);
        return -1;
    }

    // Create the enclave
    fprintf(stdout, "Host creating enclave\n");
    result = oe_create_dcr_proxy_enclave(
        argv[1], OE_ENCLAVE_TYPE_AUTO, flags, NULL, 0, &enclave);
    if (result != OE_OK)
    {
        fprintf(
            stderr,
            "oe_create_dcr_proxy_enclave(): result=%u (%s)\n",
            result,
            oe_result_str(result));
        return -1;
    }

    Comm *comm = new Comm(enclave);
    std::vector<std::thread> task_threads;

    task_threads.push_back(std::thread(&Comm::run_dc_proxy_listen_write_req_and_join_mcast, comm));
    task_threads.push_back(std::thread(&Comm::run_dc_proxy_listen_ack, comm));

#if DEBUG_MODE == true
    test_code();
#endif

    // Wait for all tasks to finish
    for (auto &t : task_threads)
    {
        t.join();
    }

    ret = 0;

exit:
    // Clean up the enclave if we created one
    if (enclave)
        oe_terminate_enclave(enclave);

    return ret;
}
